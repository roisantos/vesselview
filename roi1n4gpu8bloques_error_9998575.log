cesga/2020 unloaded
        Preparing the environment for use of the CESGA 2020 software stack.
        Please rebuild modules cache: module --ignore-cache avail
     
cesga/2020 loaded
python/3.9.9 loaded
jupyter-server/1.13.5-python-3.9.9 loaded
jupyterlab/3.2.4-python-3.9.9 loaded
/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 64 worker processes in total. Our suggested max number of worker in current system is 48, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  cpuset_checked))
  0%|          | 0/600 [00:00<?, ?batch/s]Train Epoch 0:   0%|          | 0/600 [00:02<?, ?batch/s]Train Epoch 0:   0%|          | 0/600 [00:05<?, ?batch/s]
Traceback (most recent call last):
  File "./code/training/run_benchmark.py", line 282, in <module>
    train_and_evaluate(name_model, dataset, config, logging_enabled=logging_enabled)
  File "./code/training/run_benchmark.py", line 128, in train_and_evaluate
    description=f"Train Epoch {epoch}", device=device, funcLoss=funcLoss, optimizer=optimizer
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/code/utils/utils.py", line 136, in traverseDataset
    out = model(data)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 171, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/parallel/data_parallel.py", line 181, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/parallel/parallel_apply.py", line 89, in parallel_apply
    output.reraise()
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/_utils.py", line 543, in reraise
    raise exception
torch.cuda.OutOfMemoryError: Caught OutOfMemoryError in replica 0 on device 0.
Original Traceback (most recent call last):
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/parallel/parallel_apply.py", line 64, in _worker
    output = module(*input, **kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/code/models/frnet.py", line 54, in forward
    x = conv(x)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/code/models/common.py", line 147, in forward
    x = self.norm(x)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/code/models/common.py", line 217, in forward
    return F.layer_norm(x, self.normalized_shape, self.weight, self.bias, self.eps)
  File "/mnt/netapp2/Home_FT2/home/usc/ec/rsm/tfg_codebase_cesga/venv/lib/python3.7/site-packages/torch/nn/functional.py", line 2515, in layer_norm
    return torch.layer_norm(input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 530.00 MiB (GPU 0; 39.39 GiB total capacity; 38.35 GiB already allocated; 311.94 MiB free; 38.52 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF

srun: error: a100-66: task 0: Exited with exit code 1
srun: launch/slurm: _step_signal: Terminating StepId=9998575.0
